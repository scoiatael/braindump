#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./

* Projects :@projects:
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: projects
   :EXPORT_HUGO_MENU: :menu "main" :parent "Projects"
   :END:
** DONE Blog                                            :blog:emacs:hugo:org:
   CLOSED: [2020-01-05 Sun 19:47]
   :PROPERTIES:
   :EXPORT_FILE_NAME: blog-start
   :END:
*** What?
    Decided to start a blog.
    Nothing fancy, more like a braindump.
    All the ideas for projects which are currently in various TODO programs (Google Keep, Todoiost, Wunderlist) and org files, some descriptions for already writen projects with links.
    Maybe some ramblings around random thoughts.
*** Why?
    Of all the weird places I could get motivation from, the thought occured when reading RFC. A pretty special one, for that: [[https://tools.ietf.org/html/rfc8700][RFC 8700 - Fifty Years of RFCs]]. At one point author remarked a need for less formalized form of discussion; and by that defined RFC as
    #+BEGIN_QUOTE
    The content of a NWG note may be any thought, suggestion, etc.
    related to the HOST software or other aspect of the network.
    Notes are encouraged to be timely rather than polished.
    Philosophical positions without examples or other specifics,
    specific suggestions or implementation techniques without
    introductory or background explication, and explicit questions
    without any attempted answers are all acceptable.  The minimum
    length for a NWG note is one sentence.
    #+END_QUOTE
    Somehow, the idea resonates with me a lot. And so, let's try and see what happens.
*** How?
    I like Emacs. So after some research I decided to try [[https://ox-hugo.scripter.co/][ox-hugo]] for the simplest possible solution.
** DONE Parrhasius                                                  :ruby:go:
   CLOSED: [2020-01-06 Mon 17:38]
   :PROPERTIES:
   :EXPORT_FILE_NAME: parrhasius
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :featured_image "https://camo.githubusercontent.com/8f3c61ee4eb28f12c7e0ad935906ce41831ef785/68747470733a2f2f646c2e64726f70626f782e636f6d2f732f676f76637a6564756b78676b6f6e782f323031392d31322d30352d3134313633315f3139323078313038305f7363726f742e706e67"
   :END:
   One day I found myself scrolling through [[https://4chan.org/wg][internet best source of wallpapers]] and found myself wishing for something to mass-download a whole thread.
   Without a proper google search even, decided to write something on my own. Presto! A new project.
*** Part 1: Good beginnings
    The basic part is easy enough: use [[https://nokogiri.org/][Nokogiri]] in Ruby to parse site HTML, extract image URLs:
    #+BEGIN_SRC ruby
      html = Nokogiri(open(link).read)

      html.search('a')
        .select { |l|
        l.children.size == 1 &&
          l.children.first.to_s.match(/.*(jpg|png)$/)
      }
    #+END_SRC
    and then download them:
    #+BEGIN_SRC ruby
      img_link = link.attributes['href']
      File.write(
        SecureRandom.uuid + ext(img_link.value),
        open('https:' + img_link.value).read
      )
    #+END_SRC
*** Part 2: Bad hashing
    Soon enough, the first problem becomes apparent: lots of these images are duplicates of one another.
    Long story short, it's best to use some image hashing algorithm that takes similarities into account - as some might be duplicates, but transformed (e.g. converted from jpeg to png back and forth, cropped, resized...).

    Initially, I tried to simply "normalize" images by converting to lowest quality level and then hashing resulting binary. Not only was this approach not very accurate, but very CPU-intensive. Even when using [[https://github.com/ruby-concurrency/concurrent-ruby][concurrent-ruby]] and all CPUs available, hashing was the slowest part of the process.
    My second attempt used pure Golang and tried to hash image using histograms. This too, wasn't very accurate - but a lot faster.

    After more research I stumbled upon [[http://www.hackerfactor.com/blog/?/archives/529-Kind-of-Like-That.html][DHash]].
    Since I already had a support for calling Go I decided to use an implementation in this language: https://github.com/devedge/imagehash.
    #+BEGIN_SRC go
      src, err := imagehash.OpenImg(filename)
      if err != nil {
        return "", err
      }
      hash, err := imagehash.Dhash(src, 8)

      if err != nil {
        return "", err
      }
      return hex.EncodeToString(hash), nil
    #+END_SRC
*** Part 3: Ugly glue
    The ugliest part was calling external binary to calculate the hash. At one point I stumbled upon [[https://gist.github.com/schweigert/385cd8e2267140674b6c4818d8f0c373][Gist describing Ruby-Go glue]]. This turned out to be a pretty simple task, with only one caveat: error handling.

    Golang convention is to pass possible error as 2nd return value:
    #+BEGIN_SRC go
      type cstring *C.char

      //export ExtHash
      func ExtHash(filename cstring) (cstring, cstring)
    #+END_SRC

    This proves to be quite hard to decipher from Ruby unless you read [[https://github.com/ffi/ffi][FFI docs]] quite closely. If you don't, the following Ruby definition allows calling and checking for errors properly:
    #+BEGIN_SRC ruby
      class ExtHashReturn < FFI::Struct
        layout :value, :string,
               :error, :string
      end

      attach_function :ExtHash, [:string], ExtHashReturn.by_value
    #+END_SRC
*** Part 4: Bonus
    Having the images downloaded and deduplicated, only one thing remains: browsing through them. This requires 2 things: having thumbnails generated and some simple GUI to show them (and link to original).
    Former is easy with [[https://github.com/minimagick/minimagick][minimagick]]:
    #+BEGIN_SRC ruby
      image = MiniMagick::Image.open(f.realpath)
      image.resize '256x256'
      image.write([dest, f.basename].join('/'))
    #+END_SRC
    and the latter can be quite simple with [[http://neptunian.github.io/react-photo-gallery/][React Photo Gallery]], [[https://github.com/CassetteRocks/react-infinite-scroller#readme][React Infinite Scroller]] and [[https://react-simple-img.now.sh/][React Simple Img]]. This part still requires some cleanup (and maybe Redux), so I'll delay posting code until then.
